*tex_seven.txt* 

                                      TeX-7                                  

                          A semi-automatic, minimalistic
                                  LaTeX ftplugin                               
                          that does not get in your way!


    Author: Ã“scar Pereira
    Email: See https://randomwalk.eu/contacts
    License: GPL
    Version: 1.0

    TeX-7 is a ftplugin that aims to enhance the writing experience of high
    quality documents with LaTeX and Vim. The goal of TeX-7 is to be simple
    and Vimish, meaning that focus is on carefully thought-out key mappings
    and features that are already present in a typical Vim installation. If
    you need to write a thesis or research articles and insist on having
    only one editor for all editing tasks, then TeX-7 is for you!

    The main features of TeX-7 are
        * Powerful text-object for LaTeX environments 
        * Omni-completion of BibTeX database entries and label references
        * Omni-completion of mathematical symbols, and included files
        * Preview of BibTeX database entries and label references
        * Preview of \includegraphics (supported formats: JPG, PNG, or PDF)
        * Filetype specific indentation (courtesy of Johannes Tanzler)
        * No-hassle settings, relatively few mappings
        * Supports distraction-free LaTeX "small compile", done when saving.

    Shoutouts & thanks
        * Elias Toivanen, the original author of the TeX-9 plugin.

==============================================================================

*TeX-7* *tex_seven*

    1.  Installation                                 |tex_seven-installation||
    2.  Basics                                       |tex_seven-basics|
    3.  Compilation and Multi-file                   |tex_seven-compile-mfile|
    4.  Jumping                                      |tex_seven-jumping|
    5.  Completion                                   |tex_seven-completion|
    6.  Mappings                                     |tex_seven-mappings|
    7.  Tips and tricks                              |tex_seven-tips|

==============================================================================

1.  Installation                                    *tex_seven-installation*

    To install TeX-7, I will assume you are a good citizen, and use something
    like Tim Pope's Pathogen plugin, or something to that effect. In the
    case of Pathogen, just clone this plugin into the bundle directory,
    usually `~/.vim/bundle`, and run `:Helptags` afterwords.

    Next, open up |vimrc| and ensure it contains the following line:
    >
        filetype plugin indent on
<
    Strictly speaking, for basic usage you don't need to configure anything
    else. However, you may find the following settings very useful in making
    TeX-7 more convenient to use (well, except the first one, that is just to
    disable the plugin).

    compiler : String
        * Program used to compile LaTeX sources.
        * Default: "make".

    compiler_opts : String
        * Options or parameters to be given when invoking the LaTeX compiler.
        * Default: empty.

    disable: Boolean
        * TeX-7 is disabled temporarily.
        * Default: 0 (TeX-7 is loaded).

    diamond_tex: Boolean
        * TeX-9 originally mapped <LocalLeader>< to \leq, and <LocalLeader>>
          to \geq. However, I find these LaTeX commands actually easy to type,
          to I prefer to map <LocalLeader>< to \langle\rangle, and
          <LocalLeader>> to <> (sometimes called diamond). Among other things,
          the latter is useful when writing Beamer templates.
        * Default: 1 (map <LocalLeader>> to <> and <LocalLeader>< to * \(lr)angle).

    environment_list: String
        * Path to a file containing a customised list of LaTeX environments.
        * Default: empty (TeX-7 uses its own environment list).

    leader: String
        *   Most TeX-7 mappings begin with this prefix.
        *   Optional.
        *   Default: The value of |maplocalleader|. Otherwise set to colon
            ':'.

    viewer: String
        *   Application used for viewing PDF files.
        *   Optional.
        *   Default: empty.

    viewer_images: String
        *   Application used for viewing JPG/PNG files.
        *   Optional.
        *   Default: empty.

    You set these, er, settings, by defining a |Dictionary| called
    `g:tex_seven_config` in your |vimrc| (or better yet, in
    $VIMRUNTIME/ftplugin/tex.vim).

    Example:

    let g:tex_seven_config = {
      \ 'compiler'         : '/bin/bash',
      \ 'compiler_opts'    : 'CompileTeX.sh',
      \ 'environment_list' : '~/.vim/ownsettings/latex_envs.txt' ,
      \ 'viewer'           : 'okular' ,
      \ 'viewer_images'    : 'gwenview' }

==============================================================================

2.  Basics                                          *tex_seven-basics*

    TeX-7 defines various mappings that speed up typesetting LaTeX code. Most
    of the mappings are prefixed with a leader referred below with the symbol
    <LocalLeader>. If you have set `g:tex_seven_config.leader`, the
    corresponding character is used. Otherwise, if it is set, |maplocalleader|
    is used. As a last resort, the leader defaults to colon (:).

    Especially for multi-file projects, it is recommended to lauch `(g)vim`
    from the same folder where the main `.tex` file is located. While most
    features should work fine even if you don't do this, it is the best
    strategy to avoid unforeseen problems with relative paths. Besides, it's
    the most natural thing to do anyway, so...

    Below is a short tutorial that should get you going in no time.

2.1 Insert mode

    To insert an environment, press <LocalLeader>B. You're prompted for an
    environment name, then the following is inserted:

        \begin{<envname>}
          |
        \end{<envname>}

    <envname> is the supplied environment name; the cursor is left where the |
    is.

    To insert a command, press <LocalLeader><Space>. "\cmd{arg}" is inserted
    (sans quotes), with the "cmd" part visually selected. So just type the
    command name. Then just hit <Tab>, to move to the "arg" part, which will be
    left visually selected, for you type over. After that, hitting <Tab> once
    more will move the cursor to the right of the now finished command (i.e.,
    after the '}'), so you can continue to type your LaTeX document.

    Note that mappings that set the <Tab> key behaviour described above are
    local (for the current buffer only), and are unset after finishing
    typing the command (i.e., after pressing <Tab> for the second time).
    However, if you want to interrupt the command insertion for whatever
    reason, then pressing <Esc> will clear all local maps of the <Tab> key,
    restoring any previous mappings, if any (e.g. a snippets plugin).

    Also note that the local mapping of the <Esc> key itself, that allows
    pressing it to unamp the <Tab> key, is itself cleared when pressing <Esc>.
    So long story short, this works as you would expect, without surprises.

    Moving on, type <LocalLeader>C to insert a citation, i.e.
    `\cite{citekey}`. You're prompted with a popup list of completions if the
    \bibliography{} (or \addbibresources{}) statement contains a valid BibTeX
    file. Inserting references, `\ref{ref}`, works in a similar way. The
    corresponding mapping is <LocalLeader>R. Here are a few other mappings
    that work similarly:

        * <LocalLeader>A inserts `\includeonly{}` and starts completion inside
          the brackets.
        * <LocalLeader>E inserts `\eqref{}` and starts completion inside the
          brackets.
        * <LocalLeader>Z inserts `\includegraphics{}` and starts completion
          inside the brackets. Supported graphic types: JPG, PDF, PNG.

    There are also some macros that work by double tapping a character on your
    keyboard (super convenient for subscripts and superscripts!).

        ^^ -> ^{}
        __ -> _{}
        ~~ -> \approx
        == -> &=

    Furthermore, pressing <LocalLeader>" inserts "LaTeX quotes", i.e.,
    ``''. Also works for single quotes. And by defaut, hitting
    <LocalLeader> twice (i.e. <Localleader><localleader>) inserts that
    character itself. E.g., if <LocalLeader> is set to colon (:) (the
    default without user config and |maplocalleader| defined), then
    <Localleader><localleader> inserts a literal colon in the text.

2.2 Normal mode

    Typing <LocalLeader>V should open the document in the PDF viewer
    configured in `g:tex_seven_config` (see above). If you didn't set
    `g:tex_seven_config.viewer`, an error message is shown.

    If you are using multi-file projects (see
    |tex_seven-compile-mfile|), then hitting <LocalLeader>gm will bring
    you back to the main .tex file (mnemonic: "go to main file").

    To go from from a `\label{` or `\cite{` to its corresponding definition,
    place the cursor over them and hit either [gp] or [gd]: the first will
    open the corresponding `\ref{` or bib entry in a preview window (mnemonic:
    go preview), and the second in a new buffer (using :edit; mnemonic: go to
    definition). Note that in the case of a preview window, the cursor does
    NOT move to that window. To close it, hit [gb] (mnemonic: go back).

    This functionality also works for things other than \label's and \cite's;
    see |tex_seven-jumping|.

    Typing <LocalLeader>B should move the cursor to the first line opening an
    environment ("\begin{"), that is above the current line (the line where
    the cursor is). Similarly, typing <LocalLeader>E should move the cursor to
    the first line ending an environment ("\end{"), that is below the current
    line. Both are super useful when used in combination with the mappings to
    select/yank/move/etc. entire environments, as described next.
    Especially in the case of nested environments, when the cursor is
    positioned at the innermost environment, but you want to select,
    say, the outermost.

2.3 Visual mode

    TeX-7 comes with a custom `environment operator' (see ||text-objects||).
    Press 'vie' or 'vae' in normal normal to highlight the current inner
    environment (without the \begin and \end statements) or the outer
    environment respectively. Replace 'v' with another operator to achieve
    yanking, changing or deleting etc. For example, typing 'dae' makes it
    trivial to move figures and tables around in the document. Delete the
    environment, find a new location and paste it back to the buffer!

    Additionally, there are similar operators for inline math, i.e., math
    delimited by dollar signs ($). For example, if you have $x = 1$, then
    pressing 'vam' with the cursor anywhere in that inline math expression,
    will visually select all of it, including the delimiters. Hitting 'vim'
    does the same, but excludes the delimiters. And on for 'dam', 'dim', etc.

==============================================================================

3.  Compilation and Multi-file                      *tex_seven-compile-mfile*

3.1 Compilation

    The last feature in the feature list at the beginning talks of a "small
    compile", meaning a one-time run of the LaTeX compilation program or
    script. Other compilation cycles, like a "full build" that also constructs
    the bibliography, are outside of the scope of the this plugin. This is
    because compilation of LaTeX files is very tricky to get right in all
    circumstances, and after all, Vim is not an IDE.

    Now, as any LaTeX user knows (and as novice users quickly find out),
    LaTeX's error messages can be notoriously hard to interpret correctly...
    So what one usually does is save and build often, so that if any errors do
    occur, then the user likely can pinpoint the change that caused it. To aid
    in this task, this plugin defines a normal mode mapping :ww (note
    that the : is a literal colon, not the default value of <LocalLeader>),
    that saves the current file, and does a small compile of the LaTeX
    project. So instead of writing (:w), the user can instead do a
    write-and-build, relatively seamlessly (:ww). This build is done in
    background, and if it succeeds, nothing more is said to the user,
    that can just continue to work. He is only notified if errors occur,
    so that he can go fix them, before writing any more.

3.2 Multi-file projects

    In order to work with LaTeX projects containing multiple files, each file
    other than the main one (the one containing the "\documentclass" line)
    must contain a *modeline* indicating the relative location of the main
    .tex file. E.g., if your main file is named main.tex, and it includes a
    file with relative path chapters/introduction.tex, then this file must
    contain a modeline similar to:

    % mainfile: ../main.tex

    The modeline must appear either on the three first lines of the file, or
    on the three last. Also note that the relative path must not contain
    spaces!

==============================================================================

4.  Jumping                                         *tex_seven-jumping*

    All the stuff described here with [gp], also works with [gd], with the
    difference that in the latter case it does not open in a preview window.

    (When using [gp], to close the preview window use [gb]. When using [gd],
    to go back hit CTRL-o. All in normal mode.)

4.1 Citations

    If you have a citation like `\cite[some note]{key}`, or `\nocite{key}`,
    then placing the cursor *anywhere*, even outside of the "key" part, and
    pressing [gp] will open a preview window displaying the bib entry
    corresponding to that key.

    If you have a citation like `\cite{key1, key2}`, or `\cite[some
    note]{key1, key2}`, if you press [gp] when the cursor is over "key1", or
    "key2", then the corresponding bib entry will be shown. If the cursor is
    *before* the first key, e.g. over the "\cite{" string, then the entry for
    that first key is shown (in this case "key1"). If the cursor is inside the
    curly braces, but not over any key, then *the first preceding key*
    is used. In the example, if the cursor is at the comma or the space inside
    the curly brackets, "key1" is used. If the cursor is at the closing
    bracket '}', then "key2" is used.

4.2 Labels and references

    If you have a reference like `\ref{key}`, or `\eqref{key}`, then placing
    the cursor *anywhere*, even outside of the "key" part, and pressing [gp]
    will open a preview window showing the corresponding `\label{key}`
    statement.

4.3 Includes

    If you have a line like `\include{filename}`, or `\insideonly{filename}`,
    then placing the cursor *anywhere*, even outside of the "filename" part,
    and pressing [gp] will show `filename` in  preview window.

4.4 Graphics

    If you have a line like `\includegraphics{graphicfilename}`, then placing
    the cursor *anywhere*, even outside of the "graphicfilename" part, and
    pressing [gd] or [gp] will open `graphicfilename` using the application
    configured in `g:tex_seven_config.viewer` for PDF files, and
    `g:tex_seven_config.viewer_images` for JPG or PNG files (see
    |tex_seven-installation|). If you didn't set `g:tex_seven_config.viewer`,
    and/or `g:tex_seven_config.viewer_images`, an error message is shown.

==============================================================================

5.  Completion                                      *tex_seven-completion*

    Say you have the following text in a .tex file: "\ref{|}", with the cursor
    being in the position of '|' (in insert mode). If you press
    <LocalLeader>K, `vim` will show you a popup, containing all keys
    corresponding to `\label{key}` statements found in the main .tex file, and
    any files `\include`'d therein, if any. Furthermore, if what is actually
    in your .tex file is something like: "\ref{sec:|}", then the popup will
    show only label keys that start with the prefix "sec:" (sans quotes).

    Pretty nice, right? This is called *completion*. What I described above is
    a part of so-called "omni-completion". The other is completion of math
    paraphernalia, creatively named "math-completion". Both are described in
    the following sections.

    Note that as in the example above, all completion always takes place in
    insert mode. Also, | is used to denote the cursor's position.

5.1 Omni-Completion

    The above introduction already covers the case of omni-completion for
    "\ref{"; completion for "\eqref{" works in the same way.

    Completion for "\includeonly{" and "\includegraphics{" are similar, with
    the difference that what is returned are list of files `\include`'d in the
    main .tex file (if any), and graphic files, respectively. The graphic
    files are searched in the folder that contains the main .tex file, and any
    subfolders therein (but note that any files inside folders with names
    containing the string "build" are ignored).

    In all the cases described here, if there is a prefix, then only matches
    that start with it are returned, just as was explained for the case of
    "\ref{sec:}" above.

5.2 Math-Completion

    Type <LocalLeader>M to get a popup list of different maths symbols,
    together with their shape (e.g. "\alpha" corresponds to Î±). I have
    (mostly) chosen to put on the completion list
    (~/.vim/autoload/tex_seven/omniMath.vim) symbols that have an Unicode
    representation, and can hence be "previewed" in this fashion.

    Furthermore, if there is a word to the left of the cursor, that word is
    used to filter the results of the popup list. For example, if you write
    "$x arrow|$" and press <LocalLeader>M, the popup list will contain all
    math symbols containing, but not necessarily starting with, the string
    "arrow". This also works if you write "\arrow". In both cases, you get a
    command, i.e., if you write "arrow" or "\arrow", and then select
    "rightarrow" from the completion popup, you get the command "\rightarrow".

    Additionally, the most frequently used maths symbols have their own
    shortcuts.  Typing <LocalLeader>a expands to \alpha for example. Refer
    to |tex_seven-mappings| below for a complete listing.

==============================================================================

6.  Mappings                                        *tex_seven-mappings*

    As explained in |tex_seven-basics|, the symbol <LocalLeader> refers to the
    value of `g:tex_seven_config.leader`, or if this is not set, to the value
    of |maplocalleader|. If this is also unset, then the default value is
    colon ':'.

    Furthermore, keep in mind that these mappings can be customised; see
    |tex_seven-tips| to see an example.

6.1 Insert mode

    In the mappings below, whenever completion is available (e.g. for
    \ref), it is started. Cf. |tex_seven-completion| for details.

    <LocalLeader><LocalLeader> <LocalLeader>
    <LocalLeader>'             LaTeX's inverted single commas `'
    <LocalLeader>"             LaTeX's inverted double commas ``''
    <LocalLeader>B             Insert an \includeonly
    <LocalLeader>C             Insert a citation (\cite)
    <LocalLeader>E             Insert an equation reference (\eqref)
    <LocalLeader>K             Regular (non-math) completion
    <LocalLeader>M             Math completion
    <LocalLeader>R             Insert a reference (\ref)
    <LocalLeader>Z             Insert an \includeonly reference

    Greek

    <LocalLeader>a  \alpha
    <LocalLeader>b  \beta
    <LocalLeader>c  \chi
    <LocalLeader>d  \delta
    <LocalLeader>e  \epsilon
    <LocalLeader>f  \phi
    <LocalLeader>g  \gamma
    <LocalLeader>h  \eta
    <LocalLeader>i  \iota
    <LocalLeader>k  \kappa
    <LocalLeader>l  \lambda
    <LocalLeader>m  \mu
    <LocalLeader>n  \nu
    <LocalLeader>o  \omega
    <LocalLeader>p  \pi
    <LocalLeader>q  \theta
    <LocalLeader>r  \rho
    <LocalLeader>s  \sigma
    <LocalLeader>t  \tau
    <LocalLeader>u  \upsilon
    <LocalLeader>w  \varpi
    <LocalLeader>x  \xi
    <LocalLeader>y  \psi
    <LocalLeader>z  \zeta
    <LocalLeader>D  \Delta
    <LocalLeader>F  \Phi
    <LocalLeader>G  \Gamma
    <LocalLeader>L  \Lambda
    <LocalLeader>O  \Omega
    <LocalLeader>P  \Pi
    <LocalLeader>Q  \Theta
    <LocalLeader>U  \Upsilon
    <LocalLeader>X  \Xi
    <LocalLeader>Y  \Psi
    <LocalLeader>_e \varepsilon
    <LocalLeader>_q \vartheta
    <LocalLeader>_r \varrho
    <LocalLeader>_s \varsigma
    <LocalLeader>_f \varphi

    Maths

    <LocalLeader>\     \setminus
    <LocalLeader>Â½     \sqrt{}<Left>
    <LocalLeader>N     \nabla
    <LocalLeader>S     \sum_{}^{}<Esc>2F{a
    <LocalLeader>_S    \prod_{}^{}<Esc>2F{a
    <LocalLeader>V     \vec{}<Left>
    <LocalLeader>I     \int\limits_{}^{}<Esc>2F{a
    <LocalLeader>0     \emptyset
    <LocalLeader>_0    \varnothing
    <LocalLeader>6     \partial
    <LocalLeader>Q     \infty
    <LocalLeader>/     \frac{}{}<Esc>2F{a
    <LocalLeader>\|    \lor
    <LocalLeader>&     \land
    <LocalLeader>\|\|  \bigvee
    <LocalLeader>&&    \bigwedge
    <LocalLeader>@     \circ
    <LocalLeader>*     \not
    <LocalLeader>!     \neq
    <LocalLeader>~     \neg
    <LocalLeader>=     \equiv
    <LocalLeader>-     \cap
    <LocalLeader>+     \cup
    <LocalLeader>--    \bigcap
    <LocalLeader>-+    \bigcup
    <LocalLeader>~     \widetilde{}<Left>
    <LocalLeader>^     \widehat{}<Left>
    <LocalLeader>_     \overline{}<Left>
    <LocalLeader>.     \cdot<Space>
    <LocalLeader><CR>  \nonumber\\<CR>
    <LocalLeader>Â«     \langle
    <LocalLeader>Â»     \rangle
    <LocalLeader>(     \left(  \right)<Esc>F(la
    <LocalLeader>[     \left[  \right]<Esc>F[la
    <LocalLeader>{     \left\{  \right\}<Esc>F{la

    <LocalLeader>> <><Left>
    <LocalLeader>< \langle  \rangle<Esc>F\hi

    The last two mappings above are as I preferr them. However, by
    setting the config flag `diamond_tex` to 0 (see
    |tex_seven-installation|), you can revert them to TeX-9's original
    mappings:

    <LocalLeader>< \leq
    <LocalLeader>> \geq

6.2 Normal Mode

    See |tex_seven-basics| for the details of the functionality provided
    by the mappings below.

    gb              Go back from preview window (alias to :pclose)
    gd              Go from \ref to the corresponding \label declaration, or similar
    gm              Go back to main file
    gp              Same as gd, but open a preview window

    <LocalLeader>B  Go to \begin above
    <LocalLeader>E  Go to \end below
    <LocalLeader>V  View the document

    :ww             Do a small compile (see |tex_seven-compile-mfile|)

6.3 Visual Mode

    Besides the operator for selecting environments and inline
    mathematics (see |tex_seven-basics|), the following mappings allow
    you to quickly change the style of already existing text.

    vmap <buffer><expr> <LocalLeader>bf tex_seven#ChangeFontStyle('bf')
    vmap <buffer><expr> <LocalLeader>it tex_seven#ChangeFontStyle('it')
    vmap <buffer><expr> <LocalLeader>rm tex_seven#ChangeFontStyle('rm')
    vmap <buffer><expr> <LocalLeader>sf tex_seven#ChangeFontStyle('sf')
    vmap <buffer><expr> <LocalLeader>tt tex_seven#ChangeFontStyle('tt')
    vmap <buffer>       <LocalLeader>up di\text{}<Left><C-R>"

    For example, to convert the word under the cursor to boldface, type:

    viw<Leader>bf

    To convert the current visual selectio to upright text, type:

    <Leader>up

==============================================================================

7.  Tips and tricks                                  *tex_seven-tips*

7.1 Preferred way to override, extend and hack TeX-7

    Create a custom tex.vim file in the after directory, i.e.
    ~/.vim/after/ftplugin/tex.vim. Here you can redefine mappings and extend
    TeX-7's functionality with your own ideas. If you come up with something
    sweet, drop me a line (email address available at https://randomwalk.eu).

    Notice that to redefine mappings, you need need to set <LocalLeader>
    again. As an example, here is my ~/.vim/after/ftplugin/tex.vim:

    " First, reset <LocalLeader>. Note that this will run *after* TeX-7,
    " and hence that variable b:tex_seven_leader will be set.
    if exists('g:maplocalleader')
      let s:maplocalleader_saved = g:maplocalleader
        endif
        let g:maplocalleader = b:tex_seven_leader

    " Now, implement user's customisations. In this case, override of
    " selected TeX-7 mappings.
    inoremap <buffer> <LocalLeader>e \varepsilon
    inoremap <buffer> <LocalLeader>_e \epsilon

    inoremap <buffer> <LocalLeader>_0 \emptyset
    inoremap <buffer> <LocalLeader>0 \varnothing

    " I find this easier to insert commands in .tex files (something I do
    " often).
    inoremap <buffer><expr> ,, tex_seven#InsertCommand()
    inoremap <buffer> <LocalLeader>,, ,,


    " And lastly, revert <LocalLeader> to its previous setting, if any.
    if exists('s:maplocalleader_saved')
      let g:maplocalleader = s:maplocalleader_saved
    else
      unlet g:maplocalleader
    endif

7.2 Custom environment list

    You can set a custom list of environment names for environment insertion
    (see |tex_seven-basics|). In `g:tex_seven_config`, set the
    "environment_list" key to point to the location of the file containing the
    list of environments. One environment name per line. See example of config
    in |tex_seven-installation|.

7.3 Spell checking

    If you've enabled 'modeline', you may conveniently activate spell checking
    (among other settings) in your LaTeX documents, like so (example for
    anglophones):
>
    % vim:tw=66 sw=2 ft=tex spell spelllang=en
<
    Notice that newer versions of Vim provide an option >

    let g:tex_comment_nospell=1

    for disabling spell checking of comments that otherwise get messed up
    pretty badly.

7.4 Folding

    With newer versions of Vim it's easy as >

    let g:tex_fold_enabled = 1

==============================================================================

<<<<<<< HEAD
vim:tw=72:ts=8:ft=help:norl:autoindent
=======
vim:tw=72:ts=8:ft=help:norl
>>>>>>> ghmaster
